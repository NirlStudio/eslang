#!/usr/bin/env node

var proc = require('process')

var mapping = {
  'bool': Boolean,
  'num': Number,
  'str': String,
  'sym': Symbol,
  'func': Function,
  'obj': Object,
  'date': Date,
  'arr': Array,
  'set': Set,
  'map': Map
}

function dumpType (type) {
  var i, k, v

  var utils = Object.create(null)
  var constants = Object.create(null)
  var keys = Object.getOwnPropertyNames(type)
  for (i in keys) {
    k = keys[i]
    v = type[k]
    if (typeof v === 'function') {
      utils[k] = v.toString()
    } else {
      constants[k] = typeof v
    }
  }

  var pt = type.prototype
  if (!pt) {
    return {
      props: constants,
      methods: utils
    }
  }

  var methods = Object.create(null)
  var props = Object.create(null)
  var inst = new (pt.constructor)()
  keys = Object.getOwnPropertyNames(pt)
  for (i in keys) {
    k = keys[i]
    v = type[i]
    if (typeof v === 'undefined') {
      v = inst[k]
    }
    if (typeof v === 'function') {
      methods[k] = v.toString()
    } else {
      props[k] = typeof v
    }
  }

  return {
    constants: constants,
    utils: utils,
    props: props,
    methods: methods
  }
}

function printObject (obj) {
  console.log('---- dumping', obj, '----')
  console.log(dumpType(obj))
}

var key = proc.argv.length > 2 ? proc.argv[2] : 'obj'
printObject(mapping[key] || global[key] || Object)
